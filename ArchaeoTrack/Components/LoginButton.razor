@* Components/LoginButton.razor *@

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject ArchaeoTrack.Repositories.UsersRepository UsersRepository

<AuthorizeView>
    <Authorized>
        Pozdrav, @context.User.Identity.Name! <img class="ms-1" src="@Picture" width="44">
        <a class="btn btn-sm btn-primary rounded-pill" href="#" @onclick="Logout">Odjavi se</a>
    </Authorized>
    <NotAuthorized>
        <a class="btn btn-sm btn-primary rounded-pill" href="#" @onclick="Login">Prijavi se</a>
    </NotAuthorized>
</AuthorizeView>

@code {
    private string Picture = "";

    public async Task Login() {
        await ((Auth0AuthenticationStateProvider) AuthenticationStateProvider)
            .LogInAsync();
        NavigationManager.NavigateTo( "/" );
    }

    public async Task Logout() {
        await ((Auth0AuthenticationStateProvider) AuthenticationStateProvider)
            .LogOut();
        NavigationManager.NavigateTo( "/" );
    }

    protected override async Task OnInitializedAsync() {
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        bool isUserAuthenticated = state.User.Identity?.IsAuthenticated ?? false;
        if( isUserAuthenticated ) {
            var users = await UsersRepository.GetAuth0Users();
            await UsersRepository.SaveUsersToLocalDb( users );
        }

        Picture = state.User.Claims
                    .Where( c => c.Type.Equals( "picture" ) )
                    .Select( c => c.Value )
                    .FirstOrDefault() ?? string.Empty;

        await base.OnInitializedAsync();
    }
}