@* Components/LoginButton.razor *@

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject ArchaeoTrack.Repositories.UsersRepository UsersRepository

<AuthorizeView>
    <Authorized>
        <h6 class="mb-0">@context.User.Identity.Name</h6> 
        <img src="@Picture" width="44">
        <div></div>
        <div></div>
        <a class="btn btn-sm btn-primary rounded-pill" href="#" @onclick="Logout">Odjavi se</a>
    </Authorized>
    <NotAuthorized>
        <a class="btn btn-sm btn-primary rounded-pill" href="#" @onclick="Login">Prijavi se</a>
    </NotAuthorized>
</AuthorizeView>

@code {
    private string Picture = "";

    public async Task Login() {
        await ((Auth0AuthenticationStateProvider) AuthenticationStateProvider)
            .LogInAsync();
        NavigationManager.NavigateTo( "/" );
    }

    public async Task Logout() {
        await ((Auth0AuthenticationStateProvider) AuthenticationStateProvider)
            .LogOut();
        NavigationManager.NavigateTo( "/" );
    }

    protected override async Task OnInitializedAsync() {
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        try {
            bool isUserAuthenticated = state.User.Identity?.IsAuthenticated ?? false;
            if( isUserAuthenticated ) {
                var users = await UsersRepository.GetAuth0Users();
                await UsersRepository.SaveUsersToLocalDb( users );
            }

            Picture = state.User.Claims
                        .Where( c => c.Type.Equals( "picture" ) )
                        .Select( c => c.Value )
                        .FirstOrDefault() ?? string.Empty;
        }
        catch( Exception ex ) {
            Console.WriteLine( $"Error while initializing: {ex.Message}" );
        }

        await base.OnInitializedAsync();
    }
}