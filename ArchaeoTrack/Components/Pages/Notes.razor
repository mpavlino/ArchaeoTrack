@page "/"
@attribute [Authorize]
@* @inject HttpClient HttpClient *@
@inject ArcheoTrack.Repositories.NotesRepository NotesRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime js;

@* <h3>Arheološki zapisi</h3> *@

<button class="btn btn-primary rounded-pill mb-4" @onclick="NavigateToCreateNote"><i class="bi-plus-circle"></i> Dodaj novi zapis</button>

@if( notes == null || !notes.Any() ) {
    <p><em>Nema zapisa.</em></p>
}
else {
    <table id="notesTable" class="table table-responsive mt-3">
        <thead>
            <tr>
                <th>Datum</th>
                <th>Projekt</th>
                <th>Akcija</th>
            </tr>
        </thead>
        <tbody>
            @foreach( var note in notes ) {
                <tr>
                    <td>@note.Date.ToString("dd/MM/yyyy")</td>
                    <td>@note.Project</td>
                    <td>
                        <button class="btn btn-success btn-sm rounded-pill" @onclick="() => NavigateToViewNote(note.Id)">
                            <i class="bi-eye"></i>
                        </button>
                        <button class="btn btn-secondary btn-sm rounded-pill" @onclick="() => NavigateToEditNote(note.Id)">
                            <i class="bi-pencil"></i>
                        </button>
                        <button class="btn btn-danger btn-sm rounded-pill" @onclick="() => DeleteNote(note.Id)">
                            <i class="bi-trash"></i>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Note> notes = new List<Note>();
    //private bool isTableInitialized = false;

    protected override async Task OnInitializedAsync() {
        notes = await NotesRepository.GetNotesAsync();
        //isTableInitialized = true;
    }

    // protected override async Task OnAfterRenderAsync( bool firstRender ) {
    //     if( firstRender && notes.Any() ) {
    //         // Load the JavaScript file dynamically
    //         await js.InvokeVoidAsync( "import", "./js/datatable-init.js" );

    //         // Initialize the DataTable
    //         await js.InvokeVoidAsync( "initializeDataTableIfExists", "#notesTable" );
    //     }
    // }


    private void NavigateToCreateNote() {
        NavigationManager.NavigateTo( "/noteedit" );
    }

    private void NavigateToEditNote( int id ) {
        NavigationManager.NavigateTo( $"/noteedit/{id}" );
    }

    private void NavigateToViewNote( int id ) {
        NavigationManager.NavigateTo( $"/noteview/{id}" );
    }

    private async Task DeleteNote( int id ) {
        try {
            await NotesRepository.DeleteNoteAsync( id );
            NavigationManager.Refresh( true );
        }
        catch( Exception ex ) {
            Console.WriteLine( $"Error deleting note: {ex.Message}" );
        }
    }
}
